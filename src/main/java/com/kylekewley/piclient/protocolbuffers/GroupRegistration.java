package com.kylekewley.piclient.protocolbuffers;// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ProtocolBuffers/GroupRegistration.proto
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.BOOL;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class GroupRegistration extends Message {

  public static final String DEFAULT_GROUPID = "";
  public static final Boolean DEFAULT_ADDTOGROUP = false;
  public static final Integer DEFAULT_FLAGS = 0;
  public static final String DEFAULT_CLIENTNAME = "";

  @ProtoField(tag = 1, type = STRING, label = REQUIRED)
  public final String groupID;

  /**
   * The group to add/remove from
   */
  @ProtoField(tag = 2, type = BOOL, label = REQUIRED)
  public final Boolean addToGroup;

  /**
   * True means add to group, False means remove from group
   */
  @ProtoField(tag = 3, type = UINT32)
  public final Integer flags;

  /**
   * Can be used to determine what priority message gets sent to us
   */
  @ProtoField(tag = 4, type = STRING)
  public final String clientName;

  public GroupRegistration(String groupID, Boolean addToGroup, Integer flags, String clientName) {
    this.groupID = groupID;
    this.addToGroup = addToGroup;
    this.flags = flags;
    this.clientName = clientName;
  }

  private GroupRegistration(Builder builder) {
    this(builder.groupID, builder.addToGroup, builder.flags, builder.clientName);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GroupRegistration)) return false;
    GroupRegistration o = (GroupRegistration) other;
    return equals(groupID, o.groupID)
        && equals(addToGroup, o.addToGroup)
        && equals(flags, o.flags)
        && equals(clientName, o.clientName);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = groupID != null ? groupID.hashCode() : 0;
      result = result * 37 + (addToGroup != null ? addToGroup.hashCode() : 0);
      result = result * 37 + (flags != null ? flags.hashCode() : 0);
      result = result * 37 + (clientName != null ? clientName.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<GroupRegistration> {

    public String groupID;
    public Boolean addToGroup;
    public Integer flags;
    public String clientName;

    public Builder() {
    }

    public Builder(GroupRegistration message) {
      super(message);
      if (message == null) return;
      this.groupID = message.groupID;
      this.addToGroup = message.addToGroup;
      this.flags = message.flags;
      this.clientName = message.clientName;
    }

    public Builder groupID(String groupID) {
      this.groupID = groupID;
      return this;
    }

    /**
     * The group to add/remove from
     */
    public Builder addToGroup(Boolean addToGroup) {
      this.addToGroup = addToGroup;
      return this;
    }

    /**
     * True means add to group, False means remove from group
     */
    public Builder flags(Integer flags) {
      this.flags = flags;
      return this;
    }

    /**
     * Can be used to determine what priority message gets sent to us
     */
    public Builder clientName(String clientName) {
      this.clientName = clientName;
      return this;
    }

    @Override
    public GroupRegistration build() {
      checkRequiredFields();
      return new GroupRegistration(this);
    }
  }
}
