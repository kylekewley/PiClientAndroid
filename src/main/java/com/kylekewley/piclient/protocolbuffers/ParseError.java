package com.kylekewley.piclient.protocolbuffers;// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ProtocolBuffers/ParseError.proto
import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;

public final class ParseError extends Message {

  public static final Integer DEFAULT_ERRORNUMBER = 0;
  public static final String DEFAULT_ERRORMESSAGE = "";

  @ProtoField(tag = 1, type = UINT32)
  public final Integer errorNumber;

  @ProtoField(tag = 2, type = STRING)
  public final String errorMessage;

  public ParseError(Integer errorNumber, String errorMessage) {
    this.errorNumber = errorNumber;
    this.errorMessage = errorMessage;
  }

  private ParseError(@NotNull Builder builder) {
    this(builder.errorNumber, builder.errorMessage);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ParseError)) return false;
    ParseError o = (ParseError) other;
    return equals(errorNumber, o.errorNumber)
        && equals(errorMessage, o.errorMessage);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = errorNumber != null ? errorNumber.hashCode() : 0;
      result = result * 37 + (errorMessage != null ? errorMessage.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<ParseError> {

    public Integer errorNumber;
    public String errorMessage;

    public Builder() {
    }

    public Builder(@Nullable ParseError message) {
      super(message);
      if (message == null) return;
      this.errorNumber = message.errorNumber;
      this.errorMessage = message.errorMessage;
    }

    @NotNull
    public Builder errorNumber(Integer errorNumber) {
      this.errorNumber = errorNumber;
      return this;
    }

    @NotNull
    public Builder errorMessage(String errorMessage) {
      this.errorMessage = errorMessage;
      return this;
    }

    @NotNull
    @Override
    public ParseError build() {
      return new ParseError(this);
    }
  }
}
